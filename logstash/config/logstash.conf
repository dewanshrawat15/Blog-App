input {
  file {
    path => "/var/lib/docker/containers/*/*.log"  # Directly read Docker logs
    start_position => "end"         # Start reading new logs
    codec => "json"                   # Expect JSON input
    type => "docker-json-logs"    # Add a type for filtering/routing
  }
}

filter {
  if [type] == "docker-json-logs" { # Only process logs from the file input

      #Remove unnecesary fields
      mutate {
        remove_field => ["@version", "stream", "container_id", "container_name","tags", "prospector", "offset", "input", "source", "ecs", "agent", "log.offset", "log"] #added more fields, less polution.
        rename => {
          "[host][name]" => "hostname"  # More common renaming, handles edge cases
        }
      }

    # Extract the `log` field as the main message
    # The Docker JSON log format nests the actual log message within a "log" field.
    # This also handles if the `log` key isn't present.
      if [log] {
        mutate {
            replace => { "message" => "%{log}"}
        }
        mutate {
            remove_field => ["log"]
        }
      }
      else {
        # Handle cases where the log line is NOT from Docker JSON format
        #   (e.g., direct file writes or misconfigured containers)
        mutate {
            rename => { "message" => "raw_message" }  # Rename to avoid overwriting
        }
        # Consider adding a tag to identify non-standard logs:
        mutate {
            add_tag => ["non_json_log"]
        }
      }
      # Parse the message field now
      json {
        source => "message"
        remove_field => [ "message" ] #Remove the original message field after parsing it as json.
        target => ""   #Merge with root, instead of nesting in a subfield.
        skip_on_invalid_json => true  # Crucial: Don't crash on non-JSON logs
      }

      #Date matching, this avoids relying in the wrong timestamp.
      date {
        match => [ "time", "ISO8601" ]
        target => "@timestamp"
        remove_field => ["time"]
      }

  } # end if [type]

}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "django-logs-%{+YYYY.MM.dd}"
    #user => "elastic"  # Uncomment if you have security enabled
    #password => "changeme"
  }

  # Debugging output:
    if "_jsonparsefailure" in [tags] or "non_json_log" in [tags]  {
        stdout { codec => rubydebug }
    }
}